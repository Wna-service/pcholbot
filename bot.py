#!/usr/bin/env python3
# pchol_bot.py ‚Äî Bee counter with global freeze + migration + per-message tracking

import os
import asyncio
import logging
from typing import Optional

import asyncpg
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ChatType

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
logger = logging.getLogger("pchol_bot")

BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
OWNER_ID = int(os.getenv("OWNER_ID", "0"))  # –í–∞—à Telegram ID

if not BOT_TOKEN or not DATABASE_URL or OWNER_ID == 0:
    raise RuntimeError("–ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å BOT_TOKEN, DATABASE_URL –∏ OWNER_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# ----------------------------
# –ü–æ–º–æ—â–Ω–∏–∫: –ø–æ–¥—Å—á—ë—Ç —ç–º–æ–¥–∑–∏ üêù
# ----------------------------
BEE = "üêù"

def count_bees_in_message(msg: Message) -> int:
    """–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ üêù –≤ —Ç–µ–∫—Å—Ç–µ, caption –∏ –≤ –ø–æ–ª–µ sticker.emoji (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
    count = 0
    # —Ç–µ–∫—Å—Ç
    if getattr(msg, "text", None):
        count += msg.text.count(BEE)
    # caption (—Ñ–æ—Ç–æ/—Å—Ç–∏–∫–µ—Ä—ã/–≤–∏–¥–µ–æ)
    if getattr(msg, "caption", None):
        count += msg.caption.count(BEE)
    # —Å—Ç–∏–∫–µ—Ä: emoji
    sticker = getattr(msg, "sticker", None)
    if sticker and getattr(sticker, "emoji", None):
        count += sticker.emoji.count(BEE)
    return count

# ----------------------------
# –†–∞–±–æ—Ç–∞ —Å –ë–î
# ----------------------------
class Database:
    def __init__(self, dsn: str):
        self.dsn = dsn
        self.pool: Optional[asyncpg.pool.Pool] = None

    async def connect(self):
        logger.info("Connecting to DB...")
        self.pool = await asyncpg.create_pool(dsn=self.dsn, min_size=1, max_size=10)
        async with self.pool.acquire() as conn:
            # —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ö—Ä–∞–Ω–∏–º –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ edit –∏ –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏)
            await conn.execute("""
            CREATE TABLE IF NOT EXISTS messages (
                chat_id BIGINT NOT NULL,
                message_id BIGINT NOT NULL,
                user_id BIGINT,
                bees_count INT NOT NULL DEFAULT 0,
                PRIMARY KEY (chat_id, message_id)
            );
            """)
            # –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–¥–ª—è —Ç–æ–ø–∞ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —É–ª–µ—è)
            await conn.execute("""
            CREATE TABLE IF NOT EXISTS bee_count (
                chat_id BIGINT NOT NULL,
                user_id BIGINT NOT NULL,
                username TEXT,
                count BIGINT DEFAULT 0,
                PRIMARY KEY (chat_id, user_id)
            );
            """)
            # –≥–ª–æ–±–∞–ª—å–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            await conn.execute("""
            CREATE TABLE IF NOT EXISTS global_frozen_users (
                user_id BIGINT PRIMARY KEY,
                username TEXT
            );
            """)
            # –ø–æ–ø—Ä–æ–±—É–µ–º –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ messages —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞–ª–∏ bees_count)
            await self._migrate_from_messages(conn)
        logger.info("DB ready.")

    async def _migrate_from_messages(self, conn: asyncpg.Connection):
        """
        –ï—Å–ª–∏ –≤ messages –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –∏ bee_count –ø—É—Å—Ç–æ–π / –Ω–µ–ø–æ–ª–Ω—ã–π,
        –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ bee_count (—á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å).
        """
        # —Å—á–∏—Ç–∞–µ–º –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ messages
        try:
            cnt = await conn.fetchval("SELECT COUNT(*) FROM messages")
        except Exception:
            cnt = 0
        if not cnt:
            return

        # –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ chat_id,user_id
        rows = await conn.fetch("""
            SELECT chat_id, user_id, SUM(bees_count) AS s
            FROM messages
            WHERE user_id IS NOT NULL
            GROUP BY chat_id, user_id
        """)
        if not rows:
            return

        logger.info("Migrating aggregated bees from messages -> bee_count (%d rows)", len(rows))
        for r in rows:
            chat_id = r["chat_id"]
            user_id = r["user_id"]
            s = r["s"] or 0
            # upsert into bee_count, –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É
            await conn.execute("""
                INSERT INTO bee_count(chat_id, user_id, username, count)
                VALUES($1, $2, NULL, $3)
                ON CONFLICT (chat_id, user_id) DO UPDATE
                SET count = bee_count.count + EXCLUDED.count
            """, chat_id, user_id, s)

    async def close(self):
        if self.pool:
            await self.pool.close()

    # --- —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–µ—Ä-—Å–æ–æ–±—â–µ–Ω–∏–µ) ---
    async def get_message_bees(self, chat_id: int, message_id: int) -> Optional[int]:
        async with self.pool.acquire() as conn:
            row = await conn.fetchrow("SELECT bees_count FROM messages WHERE chat_id=$1 AND message_id=$2", chat_id, message_id)
            return row["bees_count"] if row else None

    async def insert_message(self, chat_id: int, message_id: int, user_id: int, bees: int):
        async with self.pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO messages(chat_id, message_id, user_id, bees_count)
                VALUES($1,$2,$3,$4)
                ON CONFLICT (chat_id, message_id) DO NOTHING
            """, chat_id, message_id, user_id, bees)

    async def update_message_bees(self, chat_id: int, message_id: int, new_bees: int):
        async with self.pool.acquire() as conn:
            await conn.execute("UPDATE messages SET bees_count=$1 WHERE chat_id=$2 AND message_id=$3", new_bees, chat_id, message_id)

    # --- –∞–≥—Ä–µ–≥–∞—Ç per-user per-chat ---
    async def add_user_bees(self, chat_id: int, user_id: int, username: Optional[str], delta: int):
        async with self.pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO bee_count(chat_id, user_id, username, count)
                VALUES($1,$2,$3,$4)
                ON CONFLICT (chat_id, user_id) DO UPDATE
                SET count = bee_count.count + $4,
                    username = COALESCE($3, bee_count.username)
            """, chat_id, user_id, username, delta)

    async def adjust_user_bees(self, chat_id: int, user_id: int, delta: int):
        """–î–æ–±–∞–≤–∏—Ç—å (–∏–ª–∏ –≤—ã—á–µ—Å—Ç—å, –µ—Å–ª–∏ delta –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π) delta –∫ count"""
        async with self.pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO bee_count(chat_id, user_id, count)
                VALUES($1,$2,$3)
                ON CONFLICT (chat_id, user_id) DO UPDATE
                SET count = bee_count.count + $3
            """, chat_id, user_id, delta)

    async def get_total(self, chat_id: int) -> int:
        async with self.pool.acquire() as conn:
            row = await conn.fetchrow("SELECT SUM(count) AS s FROM bee_count WHERE chat_id=$1", chat_id)
            return int(row["s"] or 0)

    async def get_top10(self, chat_id: int):
        async with self.pool.acquire() as conn:
            return await conn.fetch("SELECT user_id, username, count FROM bee_count WHERE chat_id=$1 ORDER BY count DESC LIMIT 10", chat_id)

    async def get_user_count(self, chat_id: int, user_id: int) -> int:
        async with self.pool.acquire() as conn:
            row = await conn.fetchrow("SELECT count FROM bee_count WHERE chat_id=$1 AND user_id=$2", chat_id, user_id)
            return int(row["count"]) if row else 0

    # --- –≥–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞–º–æ—Ä–æ–∑–∫–∞ ---
    async def is_globally_frozen(self, user_id: int) -> bool:
        async with self.pool.acquire() as conn:
            return bool(await conn.fetchval("SELECT 1 FROM global_frozen_users WHERE user_id=$1", user_id))

    async def freeze_global(self, user_id: int, username: Optional[str] = None):
        async with self.pool.acquire() as conn:
            await conn.execute("INSERT INTO global_frozen_users(user_id, username) VALUES($1,$2) ON CONFLICT (user_id) DO UPDATE SET username=EXCLUDED.username", user_id, username)

    async def unfreeze_global(self, user_id: int):
        async with self.pool.acquire() as conn:
            await conn.execute("DELETE FROM global_frozen_users WHERE user_id=$1", user_id)

    async def list_global_frozen(self):
        async with self.pool.acquire() as conn:
            return await conn.fetch("SELECT user_id, username FROM global_frozen_users ORDER BY username NULLS LAST")

    # –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ ‚Äî –Ω–∞–π—Ç–∏ user_id –ø–æ username –∏–∑ –±–∞–∑—ã (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å)
    async def find_user_by_username_in_db(self, username: str) -> Optional[int]:
        async with self.pool.acquire() as conn:
            row = await conn.fetchrow("SELECT DISTINCT user_id FROM bee_count WHERE username=$1 LIMIT 1", username)
            return row["user_id"] if row else None

db = Database(DATABASE_URL)

# ----------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# ----------------------------
def make_confirm_kb(action: str, target_user_id: int) -> InlineKeyboardMarkup:
    btn_text = "–Ø —É–≤–µ—Ä–µ–Ω, –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å" if action == "freeze" else "–Ø —É–≤–µ—Ä–µ–Ω, —Ä–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å"
    cb = f"{action}:{target_user_id}"
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=btn_text, callback_data=cb)]])
    return kb

async def resolve_username_to_id(username: str) -> Optional[int]:
    """–ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–∑–æ–ª–≤–∏—Ç—å @username —á–µ—Ä–µ–∑ get_chat (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —é–∑–µ—Ä–æ–≤)"""
    try:
        chat = await bot.get_chat(f"@{username}")
        return chat.id
    except Exception:
        return None

# ----------------------------
# –ö–æ–º–∞–Ω–¥—ã
# ----------------------------
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Å—á–∏—Ç–∞—é –ü–ß–Å–õ üêù\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/pchol ‚Äî –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–ß–ï–õ –≤ —á–∞—Ç–µ\n"
        "/top ‚Äî —Ç–æ–ø-10 –ø–æ –ü–ß–Å–õ–ö–ê–ú\n"
        "/—É–ª–µ–π ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —É–ª–µ–π (–∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º/—É–ª–µ–π @username)\n\n"
        "–ó–∞–º–æ—Ä–æ–∑–∫–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü):\n"
        "/freeze @username ‚Äî –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–æ—Ä–æ–∑–∫—É (–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)\n"
        "/unfreeze @username ‚Äî –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–æ—Ä–æ–∑–∫—É (–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)\n"
        "/frozenlist ‚Äî (–≤–ª–∞–¥–µ–ª–µ—Ü) —Å–ø–∏—Å–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö"
    )

@dp.message(Command("pchol"))
async def cmd_pchol(message: Message):
    total = await db.get_total(message.chat.id)
    await message.reply(f"–í —ç—Ç–æ–º —á–∞—Ç–µ —É–ª–µ–π –Ω–∞ {total} –ü–ß–û–õ–û–í üêù")

@dp.message(Command("top"))
async def cmd_top(message: Message):
    rows = await db.get_top10(message.chat.id)
    if not rows:
        return await message.reply("–ü–ß–Å–õ –ø–æ–∫–∞ –Ω–µ—Ç üêù")
    text = "üèÜ –¢–æ–ø-10 –ø—á–µ–ª–æ–≤–æ–¥–æ–≤:\n"
    for i, r in enumerate(rows, start=1):
        name = r["username"] or f"User {r['user_id']}"
        text += f"{i}. {name} ‚Äî {r['count']}\n"
    await message.reply(text)

@dp.message(Command("—É–ª–µ–π"))
async def cmd_hive(message: Message):
    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—Ç, –Ω–∞ –∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∏–ª–∏
    target = None
    if message.reply_to_message and message.reply_to_message.from_user:
        target = message.reply_to_message.from_user
    else:
        # –∏—â–µ–º entity mention –∏–ª–∏ text_mention
        if message.entities:
            for ent in message.entities:
                if ent.type == "text_mention" and getattr(ent, "user", None):
                    target = ent.user
                    break
                if ent.type == "mention":
                    uname = message.text[ent.offset:ent.offset+ent.length].lstrip("@")
                    # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –ë–î
                    uid = await db.find_user_by_username_in_db(uname)
                    if uid is None:
                        uid = await resolve_username_to_id(uname)
                    if uid:
                        # –¥–µ–ª–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç User
                        target = types.User(id=uid, is_bot=False, first_name=uname)
                        break
    if not target:
        target = message.from_user

    cnt = await db.get_user_count(message.chat.id, target.id)
    if target.id == message.from_user.id:
        await message.reply(f"üêù –í–∞—à —É–ª–µ–π: {cnt} –ü–ß–û–õ–û–í")
    else:
        name = target.full_name or (target.username or f"User {target.id}")
        await message.reply(f"üêù –£–ª–µ–π {name}: {cnt} –ü–ß–û–õ–û–í")

# ----------------------------
# Freeze / Unfreeze –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏–µ
# ----------------------------
@dp.message(Command("freeze"))
async def cmd_freeze(message: Message):
    if message.from_user.id != OWNER_ID:
        return await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_user = None
    if message.reply_to_message and message.reply_to_message.from_user:
        target_user = message.reply_to_message.from_user
    else:
        # –∏—â–µ–º mention/text_mention
        if message.entities:
            for ent in message.entities:
                if ent.type == "text_mention" and getattr(ent, "user", None):
                    target_user = ent.user
                    break
                if ent.type == "mention":
                    uname = message.text[ent.offset:ent.offset+ent.length].lstrip("@")
                    uid = await db.find_user_by_username_in_db(uname)
                    if uid is None:
                        uid = await resolve_username_to_id(uname)
                    if uid:
                        target_user = types.User(id=uid, is_bot=False, first_name=uname)
                        break
    if not target_user:
        return await message.reply("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username.")
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ —Ç–æ–º –∂–µ —á–∞—Ç–µ –∏ —à–ª—ë–º confirmation –≤ –õ–° –≤–ª–∞–¥–µ–ª—å—Ü—É
    await message.reply(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–º–æ—Ä–æ–∑–∫—É @{target_user.username or target_user.full_name} –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü—É –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    kb = make_confirm_kb("freeze", target_user.id)
    txt = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ *–∑–∞–º–æ—Ä–æ–∑–∏—Ç—å* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{target_user.username or target_user.id} –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö?"
    try:
        await bot.send_message(OWNER_ID, txt, reply_markup=kb, parse_mode="Markdown")
    except Exception:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É ‚Äî –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º (/start).")

@dp.message(Command("unfreeze"))
async def cmd_unfreeze(message: Message):
    if message.from_user.id != OWNER_ID:
        return await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)
    target_user = None
    if message.reply_to_message and message.reply_to_message.from_user:
        target_user = message.reply_to_message.from_user
    else:
        if message.entities:
            for ent in message.entities:
                if ent.type == "text_mention" and getattr(ent, "user", None):
                    target_user = ent.user
                    break
                if ent.type == "mention":
                    uname = message.text[ent.offset:ent.offset+ent.length].lstrip("@")
                    uid = await db.find_user_by_username_in_db(uname)
                    if uid is None:
                        uid = await resolve_username_to_id(uname)
                    if uid:
                        target_user = types.User(id=uid, is_bot=False, first_name=uname)
                        break
    if not target_user:
        return await message.reply("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username.")
    await message.reply(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞–∑–º–æ—Ä–æ–∑–∫—É @{target_user.username or target_user.full_name} –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
    kb = make_confirm_kb("unfreeze", target_user.id)
    txt = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ *—Ä–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{target_user.username or target_user.id} –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö?"
    try:
        await bot.send_message(OWNER_ID, txt, reply_markup=kb, parse_mode="Markdown")
    except Exception:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É ‚Äî –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º (/start).")

# ----------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–≤ –õ–° –≤–ª–∞–¥–µ–ª—å—Ü–∞)
# ----------------------------
@dp.callback_query(F.data.regexp(r"^(freeze|unfreeze):\d+$"))
async def on_confirm_callback(callback: CallbackQuery):
    # —Ñ–æ—Ä–º–∞—Ç callback.data = "freeze:123456789"
    if callback.from_user.id != OWNER_ID:
        return await callback.answer("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å.", show_alert=True)
    action, uid_str = callback.data.split(":")
    target_uid = int(uid_str)
    # –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–º—è/–Ω–∏–∫ —á–µ—Ä–µ–∑ get_chat
    uname = None
    try:
        chat = await bot.get_chat(target_uid)
        uname = getattr(chat, "username", None) or getattr(chat, "first_name", None)
    except Exception:
        uname = None
    if action == "freeze":
        await db.freeze_global(target_uid, uname)
        await callback.message.edit_text(f"‚ùÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (id={target_uid}) –≥–ª–æ–±–∞–ª—å–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω.")
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω.")
    else:
        await db.unfreeze_global(target_uid)
        await callback.message.edit_text(f"üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (id={target_uid}) —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω.")
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω.")

# ----------------------------
# –°–ø–∏—Å–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)
# ----------------------------
@dp.message(Command("frozenlist"))
async def cmd_frozenlist(message: Message):
    if message.from_user.id != OWNER_ID:
        return await message.reply("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã—Ö.")
    rows = await db.list_global_frozen()
    if not rows:
        return await message.reply("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
    text = "–ì–ª–æ–±–∞–ª—å–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for r in rows:
        uname = r["username"] or f"id={r['user_id']}"
        text += f"- {uname} (id={r['user_id']})\n"
    await message.reply(text)

# ----------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è —Å—Ç–∏–∫–µ—Ä—ã/–ø–æ–¥–ø–∏—Å–∏)
# ----------------------------
@dp.message()
async def on_any_message(message: Message):
    # –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã –∏ –ª–∏—á–Ω—ã–µ
    if message.chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP, ChatType.PRIVATE):
        return

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ üêù –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (text, caption, sticker.emoji)
    bees = count_bees_in_message(message)
    if bees <= 0:
        # –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ
        return

    # –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: message.from_user –º–æ–∂–µ—Ç –±—ã—Ç—å None (–Ω–∞–ø—Ä–∏–º–µ—Ä –ø—Ä–∏ service messages)
    if not message.from_user:
        return

    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–æ–±–∞–ª—å–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º)
    if await db.is_globally_frozen(user_id):
        logger.debug("User %s is globally frozen ‚Äî ignoring %d bees", user_id, bees)
        # –ù–æ –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–ø–∏—Å—å –≤ messages –∫–∞–∫ zero? —Ä–µ—à–∞–µ–º: –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —Ç.–∫. –æ–Ω –∑–∞–º–æ—Ä–æ–∂–µ–Ω
        return

    # –ê—Ç–æ–º–∞—Ä–Ω–æ: –≤—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç) –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–≥—Ä–µ–≥–∞—Ç
    # –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –æ message —É–∂–µ –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä duplicate update), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    existing = await db.get_message_bees(message.chat.id, message.message_id)
    if existing is not None:
        # —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return

    # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é
    await db.insert_message(message.chat.id, message.message_id, user_id, bees)
    await db.add_user_bees(message.chat.id, user_id, username, bees)

# ----------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ edit message
# ----------------------------
@dp.edited_message()
async def on_edited_message(message: Message):
    # –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ ‚Äî –ø–æ—Å—á–∏—Ç–∞—Ç—å –Ω–æ–≤–æ–µ bees, —Å—Ä–∞–≤–Ω–∏—Ç—å —Å old –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å diff
    if message.chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP, ChatType.PRIVATE):
        return
    if not message.from_user:
        return
    new_bees = count_bees_in_message(message)
    old_bees = await db.get_message_bees(message.chat.id, message.message_id)
    # –µ—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞—Ä–æ–π –∑–∞–ø–∏—Å–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ –∑–∞–º–æ—Ä–æ–∂–µ–Ω)
    if old_bees is None:
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä
